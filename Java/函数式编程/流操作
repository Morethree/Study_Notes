## 流处理优势

1. 流并不存储其元素。这些元素可能存储在底层的集合中，或者是按需生成的。
2. 流的操作不会修改其数据源。例如，filter方法不会从新的流中移除元素，而是会生成一个新的流，其中不包含被过滤掉的元素。
3. 流的操作是尽可能惰性执行的。这意味着直至需要其结果时，操作才会执行。例如，如果我们只想查找前5个长单词而不是所有长单词，那么filter方法就会在匹配到第5个单词后停止过滤。因此，我们甚至可以操作无限流。

---

## 作流是操作流时的典型流程

1. 创建一个流。
2. 指定将初始流转换为其他流的中间操作，可能包含多个步骤。
3. 应用终止操作，从而产生结果。这个操作会强制执行之前的惰性操作。从此之后，这个流就再也不能用了。

---

## 流创建

1. 静态的Stream.of方法
2. 使用Array.stream（array，from，to）可以从数组中位于from（包括）和to（不包括）的元素中创建一个流。
3. 静态的Stream.empty方法创建不包含任何元素的流
4. ![](assets/20230316_114351_image.png)
5. ![](assets/20230316_114417_image.png)
6. ![](assets/20230316_114835_image.png)
7. Java API中有大量方法都可以产生流
   ![](assets/20230316_114932_image.png)
